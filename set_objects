Operation	                Equivalent	    Result
len(s)	 	                            number of elements in set s (cardinality)
x in s	 	                            test x for membership in s
x not in s	 	                        test x for non-membership in s
s.issubset(t)	            s <= t	    test whether every element in s is in t
s.issuperset(t)	            s >= t	    test whether every element in t is in s
s.union(t)	                s | t       new set with elements from both s and t
s.intersection(t)	        s & t	    new set with elements common to s and t
s.difference(t)	            s - t	    new set with elements in s but not in t
s.symmetric_difference(t)	s ^ t	    new set with elements in either s or t but not both
s.copy()	 	                        new set with a shallow copy of s
s.update(t)	                s |= t	    return set s with elements added from t
s.intersection_update(t)	s &= t	    return set s keeping only elements also found in t
s.difference_update(t)	    s -= t	    return set s after removing elements found in t
s.symmetric_difference_update(t)	s ^= t	return set s with elements from s or t but not both
s.add(x)	 	                        add element x to set s
s.remove(x)	 	                        remove x from set s; raises KeyError if not present
s.discard(x)	 	                    removes x from set s if present
s.pop()	 	                            remove and return an arbitrary element from s; raises KeyError if empty
s.clear()	 	                        remove all elements from set s